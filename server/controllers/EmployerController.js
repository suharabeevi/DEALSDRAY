const asyncHandler = require("express-async-handler");
const AppError = require("../utils/AppError");
// const config = require('../utils/constants')
const HttpStatusCodes = require("../utils/middlewares/statusCodes");
const JoiEmployeeUpdateSchemavalidate = require('../utils/updateEmployevalidation')
const {
  Employee,
  JoiEmployeeSchemavalidate,
} = require("../models/EmployerModel");
const crypto = require("crypto");

const AdminCreateEmployer = asyncHandler(async (req, res, next) => {
  try {

    // Validate the request body
    const { error } = JoiEmployeeSchemavalidate(req.body);
    if (error) {
      return res.status(HttpStatusCodes.BAD_REQUEST).json({
        success: false,
        message: error.details[0].message
      });
    }

    const {
      f_Name,
      f_Email,
      f_Mobile,
      f_Designation,
      f_Gender,
      f_Course
    } = req.body;

    let employeimageUrl;
    if (req.file && req.file.path) {
      employeimageUrl = req.file.path; // Use the URL generated by Cloudinary
    }

    // Check if employee already exists
    const employeeExists = await Employee.findOne({ f_Email });
    if (employeeExists) {
      return res.status(HttpStatusCodes.CONFLICT).json({
        success: false,
        message: "Employee with this email already exists"
      });
    }
    const employeemobileExists = await Employee.findOne({ f_Mobile });
    if (employeemobileExists) {
      return res.status(HttpStatusCodes.CONFLICT).json({
        success: false,
        message: "Employee with this mobile number already exists"
      });
    }

    const newEmployee = new Employee({
      f_Image: employeimageUrl,
      f_Name,
      f_Email,
      f_Mobile,
      f_Designation,
      f_Gender,
      f_Course
    });

    await newEmployee.save();

    // Generate f_Id based on the new _id
    const hash = crypto.createHash("sha256");
    hash.update(newEmployee._id.toString()); // Convert ObjectId to string
    const hashedId = hash.digest("hex").slice(0, 6);

    // Update the new employee with f_Id
    newEmployee.f_Id = hashedId;
    await newEmployee.save();

    res.status(HttpStatusCodes.SUCCESS).json({
      success: true,
      message: "Employee registered successfully",
      employee: newEmployee
    });
  } catch (error) {
    console.error("Error in AdminCreateEmployer:", error);
    next(error);
  }
});


const GetAllEmployer = asyncHandler(async (req, res, next) => {
  try {
    const allEmployer = await Employee.find();

    if (allEmployer.length === 0) {
      return res.status(HttpStatusCodes.NOT_FOUND).json({
        success: false,
        message: "Employer List is Empty"
      });
    }

    res.status(HttpStatusCodes.SUCCESS).json({
      success: true,
      message: "Fetch all the employers successfully",
      employee: allEmployer,
    });
  } catch (error) {
    console.error("Error in GetAllEmployer:", error);
    next(new AppError("Internal Server error", HttpStatusCodes.INTERNAL_SERVER_ERROR));
  }
});


const DeleteEmployerById = asyncHandler(async (req, res, next) => {
  try {
    const { EmployerId } = req.params;
    // Assuming you have a method to find and delete employers in your service
    const deletedEmployer = await Employee.findByIdAndDelete(EmployerId);

    if (!deletedEmployer) {
      return res.status(404).json({ success: false, message: 'Employer not found' });
    }

    res.status(HttpStatusCodes.SUCCESS).json({
      success: true,
      message: 'Employer deleted successfully',
    });
  } catch (error) {
    console.error("Error in DeleteEmployerById:", error);
    next(new AppError("Internal Server error", HttpStatusCodes.INTERNAL_SERVER_ERROR));
  }
});

const updateEmployer = asyncHandler(async(req,res,next)=>{

  try {

    const { error } = JoiEmployeeUpdateSchemavalidate(req.body);
    if (error) {
      return res.status(HttpStatusCodes.BAD_REQUEST).json({
        success: false,
        message: error.details[0].message
      });
    }
    console.log(req.params, req.body);
    const { EmployerId } = req.params;

    const {
      U_f_Name,
      U_f_Email,
      U_f_Mobile,
      U_f_Designation,
      U_f_Gender,
      U_f_Course
    } = req.body;

    let update_employeimageUrl;
    if (req.file && req.file.path) {
      update_employeimageUrl = req.file.path; // Use the URL generated by Cloudinary or any file upload service
    }

    // Update the employer
    const updatedEmployer = await Employee.findByIdAndUpdate(
      EmployerId,
      {
        f_Image:update_employeimageUrl,
        f_Name :U_f_Name,
        f_Email:U_f_Email,
        f_Mobile:U_f_Mobile,
        f_Designation:U_f_Designation,
        f_Gender:U_f_Gender,
        f_Course:U_f_Course
        
        // Add other fields you want to update
      },
      { new: true } // Return the updated document
    );

    if (!updatedEmployer) {
      return res.status(HttpStatusCodes.NOT_FOUND).json({
        success: false,
        message: 'Employer not found'
      });
    }

    // Respond with success message and updated data
    res.status(HttpStatusCodes.OK).json({
      success: true,
      message: 'Employer updated successfully',
      data: updatedEmployer
    });
  } catch (err) {
    // Handle any error that occurs during update
    console.error('Error updating employer:', err);
    res.status(HttpStatusCodes.INTERNAL_SERVER_ERROR).json({
      success: false,
      message: 'Error updating employer'
    });
  }
});

module.exports = { AdminCreateEmployer, GetAllEmployer ,DeleteEmployerById,updateEmployer};
